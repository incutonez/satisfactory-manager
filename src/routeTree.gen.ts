/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ItemsImport } from './routes/items'
import { Route as ItemsItemIdRecipeTypeRecipeTypeImport } from './routes/items.$itemId.recipeType/$recipeType'
import { Route as ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdImport } from './routes/items.$itemId.recipeType/$recipeType/recipes.$recipeId'

// Create/Update Routes

const ItemsRoute = ItemsImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => rootRoute,
} as any)

const ItemsItemIdRecipeTypeRecipeTypeRoute =
  ItemsItemIdRecipeTypeRecipeTypeImport.update({
    id: '/$itemId/recipeType/$recipeType',
    path: '/$itemId/recipeType/$recipeType',
    getParentRoute: () => ItemsRoute,
  } as any)

const ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute =
  ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdImport.update({
    id: '/recipes/$recipeId',
    path: '/recipes/$recipeId',
    getParentRoute: () => ItemsItemIdRecipeTypeRecipeTypeRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/items': {
      id: '/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsImport
      parentRoute: typeof rootRoute
    }
    '/items/$itemId/recipeType/$recipeType': {
      id: '/items/$itemId/recipeType/$recipeType'
      path: '/$itemId/recipeType/$recipeType'
      fullPath: '/items/$itemId/recipeType/$recipeType'
      preLoaderRoute: typeof ItemsItemIdRecipeTypeRecipeTypeImport
      parentRoute: typeof ItemsImport
    }
    '/items/$itemId/recipeType/$recipeType/recipes/$recipeId': {
      id: '/items/$itemId/recipeType/$recipeType/recipes/$recipeId'
      path: '/recipes/$recipeId'
      fullPath: '/items/$itemId/recipeType/$recipeType/recipes/$recipeId'
      preLoaderRoute: typeof ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdImport
      parentRoute: typeof ItemsItemIdRecipeTypeRecipeTypeImport
    }
  }
}

// Create and export the route tree

interface ItemsItemIdRecipeTypeRecipeTypeRouteChildren {
  ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute: typeof ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute
}

const ItemsItemIdRecipeTypeRecipeTypeRouteChildren: ItemsItemIdRecipeTypeRecipeTypeRouteChildren =
  {
    ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute:
      ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute,
  }

const ItemsItemIdRecipeTypeRecipeTypeRouteWithChildren =
  ItemsItemIdRecipeTypeRecipeTypeRoute._addFileChildren(
    ItemsItemIdRecipeTypeRecipeTypeRouteChildren,
  )

interface ItemsRouteChildren {
  ItemsItemIdRecipeTypeRecipeTypeRoute: typeof ItemsItemIdRecipeTypeRecipeTypeRouteWithChildren
}

const ItemsRouteChildren: ItemsRouteChildren = {
  ItemsItemIdRecipeTypeRecipeTypeRoute:
    ItemsItemIdRecipeTypeRecipeTypeRouteWithChildren,
}

const ItemsRouteWithChildren = ItemsRoute._addFileChildren(ItemsRouteChildren)

export interface FileRoutesByFullPath {
  '/items': typeof ItemsRouteWithChildren
  '/items/$itemId/recipeType/$recipeType': typeof ItemsItemIdRecipeTypeRecipeTypeRouteWithChildren
  '/items/$itemId/recipeType/$recipeType/recipes/$recipeId': typeof ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute
}

export interface FileRoutesByTo {
  '/items': typeof ItemsRouteWithChildren
  '/items/$itemId/recipeType/$recipeType': typeof ItemsItemIdRecipeTypeRecipeTypeRouteWithChildren
  '/items/$itemId/recipeType/$recipeType/recipes/$recipeId': typeof ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/items': typeof ItemsRouteWithChildren
  '/items/$itemId/recipeType/$recipeType': typeof ItemsItemIdRecipeTypeRecipeTypeRouteWithChildren
  '/items/$itemId/recipeType/$recipeType/recipes/$recipeId': typeof ItemsItemIdRecipeTypeRecipeTypeRecipesRecipeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/items'
    | '/items/$itemId/recipeType/$recipeType'
    | '/items/$itemId/recipeType/$recipeType/recipes/$recipeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/items'
    | '/items/$itemId/recipeType/$recipeType'
    | '/items/$itemId/recipeType/$recipeType/recipes/$recipeId'
  id:
    | '__root__'
    | '/items'
    | '/items/$itemId/recipeType/$recipeType'
    | '/items/$itemId/recipeType/$recipeType/recipes/$recipeId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ItemsRoute: typeof ItemsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ItemsRoute: ItemsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/items"
      ]
    },
    "/items": {
      "filePath": "items.tsx",
      "children": [
        "/items/$itemId/recipeType/$recipeType"
      ]
    },
    "/items/$itemId/recipeType/$recipeType": {
      "filePath": "items.$itemId.recipeType/$recipeType.tsx",
      "parent": "/items",
      "children": [
        "/items/$itemId/recipeType/$recipeType/recipes/$recipeId"
      ]
    },
    "/items/$itemId/recipeType/$recipeType/recipes/$recipeId": {
      "filePath": "items.$itemId.recipeType/$recipeType/recipes.$recipeId.tsx",
      "parent": "/items/$itemId/recipeType/$recipeType"
    }
  }
}
ROUTE_MANIFEST_END */
